// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  launchpad
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

enum Role {
  COMPANY_OWNER
  COMPANY_ADMIN
  COMPANY_USER
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?        @db.Text
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(COMPANY_USER)
  companyId     String?
  Company       Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Accounts      Account[]
  Permissions   Permissions[]
  Ticket        Ticket[]
  Notification  Notification[]

  @@index([companyId])
}

model Permissions {
  id        String  @id @default(uuid())
  email     String
  User      User    @relation(fields: [email], references: [email], onDelete: Cascade)
  companyId String
  Company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  access    Boolean

  @@index([companyId])
  @@index([email])
}

model Company {
  id               String                 @id @default(uuid())
  connectAccountId String?                @default("")
  name             String
  agencyLogo       String                 @db.Text
  companyEmail     String                 @db.Text
  whiteLabel       Boolean                @default(true)
  goal             Int                    @default(5)
  users            User[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  SidebarOption    CompanySidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  Permissions      Permissions[]
  Contact          Contact[]
  Media            Media[]
}

model Lane {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tickets   Ticket[]
  order     Int      @default(0)
}

model Ticket {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String
  order       Int      @default(0)
  Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value       Decimal?
  description String?

  customerId String?
  Customer   Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId String?
  Assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String?
  number    String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId String
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Ticket    Ticket[]

  @@index([companyId])
}

model Media {
  id        String   @id @default(uuid())
  type      String?
  name      String
  link      String   @unique
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model CompanySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  companyId String
  Company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id        String           @id @default(uuid())
  email     String           @unique
  companyId String
  Company   Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status    InvitationStatus @default(PENDING)
  role      Role             @default(COMPANY_USER)

  @@index([companyId])
}

model Notification {
  id           String @id @default(uuid())
  notification String
  companyId    String
  userId       String

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([userId])
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  companyId String?  @unique
  Company   Company? @relation(fields: [companyId], references: [id])

  @@index([customerId])
}
